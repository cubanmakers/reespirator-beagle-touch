#!/usr/bin/python3
"""resPyRator UI

Usage:
  respyrator help
  respyrator version
  respyrator ui [-d|--debug] [-r|--record] [-a|--auto] [-p|--port] [FILE]
  respyrator test
  respyrator install

Options:
    -h, help         Show help
    -v, version      Version
    -a, auto         Search an arduino device connected a port
    -p, port         Force a serial port, for example: /dev/ttyUSB0
    -d, debug        Debug mode, use fake serial for dev porpouses
    -r, record       Record all data sended and received in files
"""
import os
import sys
import unittest

from serial import Serial

import respyrator
from docopt import docopt


def help():
    print(__doc__)


def version():
    print('Version %s' % respyrator.__version__)


def test():
    loader = unittest.TestLoader()
    tests = loader.discover('.')
    testRunner = unittest.runner.TextTestRunner()
    testRunner.run(tests)


def search_serial_devices():
    ports = respyrator.serial.serial_ports_get()
    if not ports:
        print(
            'For use auto discovery serial port, you must administrator or '
            'root')
        sys.exit(-1)
    devices = {}
    for port in ports:
        msg_ok = '%s \tOK \n' % port
        msg_ko = '%s \tDEVICE UNKNOW\n' % port
        msg_on = '%s \t...' % port
        sys.stderr.write(msg_on)
        sys.stderr.flush()
        device = respyrator.serial.serial_discovery_port([port])
        if device:
            sys.stderr.write('\b' * (len(msg_on) + 2))
            sys.stderr.write(msg_ok)
            sys.stderr.flush()
            devices.append(device)
        else:
            sys.stderr.write('\b' * (len(msg_on) + 2))
            sys.stderr.write(msg_ko)
            sys.stderr.flush()
    print('Found %s devices' % len(devices))
    return devices


def record(serial, filename):
    serial = Serial(port=serial, baudrate=115200, timeout=0.2)
    df = respyrator.data_frame.DataFrame(serial)
    df.record_start()
    print('Press Control-C for finish record')
    try:
        count = 1
        txt = ''
        while True:
            df.read()
            if txt:
                sys.stderr.write('\b' * len(txt))
            txt = '%d frame' % count
            sys.stderr.write(txt)
            sys.stderr.flush()
            count += 1
    except KeyboardInterrupt:
        pass
    finally:
        df.record_stop(filename)
        print('\nFile "%s" created' % os.path.abspath(filename))


def ui(args):
    if args.get('--auto'):
        devices = search_serial_devices()
        if not devices:
            sys.exit(0)
        respyrator.core.logger.info('Auto search port %s' % devices[0])
        respyrator.core.config['port'] = devices[0]
    respyrator.core.config['serial_file'] = args.get('FILE')
    respyrator.ui.app()


def install(args):
    pass
    # TODO probe install process
    # systemd_fname = respyrator.core.path('..', 'respyrator.service')
    # respyrator.core.popen(['cp', systemd_fname, '/etc/systemd/system/'])
    # respyrator.core.popen(['systemctl', 'enable', 'respyrator'])
    # respyrator.core.popen(['systemctl', 'start', 'respyrator'])
    # print('Installed!')


if __name__ == '__main__':
    args = docopt(__doc__, version=respyrator.__version__)
    respyrator.core.set_debug(args.get('--debug', False))
    if args.get('--record'):
        respyrator.core.config['record'] = True
    if args.get('--port'):
        respyrator.core.config['serial_port'] = True
    if args.get('help'):
        help()
    elif args.get('version'):
        version()
    elif args.get('test'):
        test()
    elif args.get('ui'):
        ui(args)
    elif args.get('install'):
        install(args)
